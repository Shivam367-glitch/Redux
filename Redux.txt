1)Store(Shop)--->holds the state of application.

2)Reducer(ShopKeeper)----->which handles the action and decides how to update the state.

3)Action(Customer)----->that describes what happened in the application.



Three Core principles



1) application has only one state as a object

2) application can not update state directly(use action to update the state of the application)

3) Reducer response to that action  and update state according to that.....
	(reducer is that who bind action and state of application together)



Combine Reducer--->is used to combine multiple reducer like in our example(cakeReducer and iceCream)


Immer--->is a libary used to update nested state easily.(npm immer)


Middleware---->is the suggest way to extend redux with custom functionality.(example---> redux-logger,redux-thunk)

provides a third-party extension point  between dispatching an action,and the moment it reaches the reducer

use Middleware for logging,crash reporting,performing Asynchronous tasks etc.

steps to use middleware is-->

import applyMiddleware function from redux
-->second we have to pass this middleware
const store=createStore(reducer,applyMiddleware(logger));  


asynchronous action creator --->are the action creator that return a function instead of action  object
--->this ability come to it,due to redux-thunk middleware

