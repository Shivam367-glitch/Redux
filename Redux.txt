1)Store(Shop)--->holds the state of application.

2)Reducer(ShopKeeper)----->which handles the action and decides how to update the state.

3)Action(Customer)----->that describes what happened in the application.



Three Core principles



1) application has only one state as a object

2) application can not update state directly(use action to update the state of the application)

3) Reducer response to that action  and update state according to that.....
	(reducer is that who bind action and state of application together)



Combine Reducer--->is used to combine multiple reducer like in our example(cakeReducer and iceCream)


Immer--->is a libary used to update nested state easily.(npm immer)


Middleware---->is the suggest way to extend redux with custom functionality.(example---> redux-logger,redux-thunk)

provides a third-party extension point  between dispatching an action,and the moment it reaches the reducer

use Middleware for logging,crash reporting,performing Asynchronous tasks etc.

steps to use middleware is-->

import applyMiddleware function from redux
-->second we have to pass this middleware
const store=createStore(reducer,applyMiddleware(logger));  


asynchronous action creator --->are the action creator that return a function instead of action  object
--->this ability come to it,due to redux-thunk middleware 

const fetchUsers = () => {
    return async function(dispatch) {
        dispatch(fetchUser());   
        try {
            const res = await axios.get('https://jsonplaceholder.typicode.com/users');
            const users = res.data.map(user => user.id);
            console.log(users);
            dispatch(fetchSuccess(users));
        } catch (err) {
            dispatch(fetchError(err.message));
        }
    };
};


															REDUX TOOLKIT

Q) Why to use redux-toolkit instead of redux? 
  
  --> Redux requires too much boilerplate code. 
      >	Action
	  >	Action Object
	  >	Action Creator
	  >	Switch Statement in a reducer

A lot of packages require in redux.


Redux Toolkit ----> The official, opinionated, batteries-included toolset for efficient Redux development.

                 ---> opinionated ---> which have to follow some rules while using redux-toolkit.(we have to follow folder structure)
				 ---> batteries-included ---> there are many things which  are pre-configure for developer.

				 
first we have to create two folder
1)app
  --->store.js
2)features-->contain folders like
			--->cake
			    --->cakeSlice.js
			--->iceCream
				--->iceCreamSlice..js


Middleware in Redux toolkit

we have to pass a function to store. 
const store=configureStore({
    reducer:{
        cake:cakeReducer,
        iceCream:iceCreamReducer
    },
    middleware:(getDefaultMiddleware)=>getDefaultMiddleware().concat(logger)
});


Extra Reducer--->are reducer which response to other action type generated by reducer of that particular slice.

in plain redux-->all reducer receive all type of action 

in redux toolkit -->all reducer receive their respective action and they response to that.


if we want other reducer to response to other action type of their own then we use extraReducer

const iceCreamSlice=createSlice({
    name:'iceCream',
    initialState,
    reducers:{
        ordered:(state)=>{
            state.numsOfIceCream--;
        },
        restored:(state,action)=>{
            state.numsOfIceCream+=action.payload;
        }
    },
    extraReducers:(builder)=>{
        builder.addCase(cakeAction.ordered,state=>{
            state.numsOfIceCream--;
        })
    }
});


useSelector-->is the wrapper around store.getStore()